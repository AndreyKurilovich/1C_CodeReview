#Область ПрограммныйИнтерфейс

// Метод формирует полное имя файла исходников.
// Складывается путь к исходным файлам и расположение самого файла.
//
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - файл, для которого требуется получить имя..
//
// Возвращаемое значение:
//  Строка - Полное имя файла
//
Функция ПолныйПутьФайла(ФайлСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Владелец КАК Владелец,
		|	Файлы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ФайлСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Конфигурация = Выборка.Владелец;
	
	КаталогРепозитория = РаботаСЗадачамиПовтИсп.КаталогРепозиторияКонфигурацииОбратныеСлеши(Конфигурация); 
	
	ИмяФайла = КаталогРепозитория + Выборка.Наименование;
	
	Возврат ИмяФайла;
	
КонецФункции

// Поиск ссылки на конфигурацию по переданному коду
//
// Параметры:
//  КодКонфигурации - Строка - строковый код.
//
// Возвращаемое значение:
//  Конфигурация - СправочникСсылка.Конфигурации
//   
Функция КонфигурацияПоКоду(КодКонфигурации) Экспорт

	Конфигурация = Справочники.Конфигурации.НайтиПоКоду(КодКонфигурации);
	
	Возврат Конфигурация;

КонецФункции

// Формирование полного списка задач, у которых состояние к выполнению 
// ОписаниеМетода2
// ОписаниеМетода3
//
// ДопОписаниеМетода1
// ДопОписаниеМетода2
//
// Параметры:
//  Конфигурация - СправочникСсылка.Конфигурации - Отбор по конкретной задаче.
//  Задача - СправочникСсылка.Задачи - Отбор по конкретной задаче.
//
// Возвращаемое значение:
//  Массив - СправочникСсылка.Задачи
//
Функция ЗадачиДляПоискаВИсходномКоде(Конфигурация, Задача = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению)
		|	И &ОтборПоЗадаче
		|	И Задачи.Конфигурация = &Конфигурация";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	Если Задача = Неопределено Тогда
	
		ОтборПоЗадаче = "ИСТИНА";
		
	Иначе
		
		ОтборПоЗадаче = "Задачи.Ссылка = &Задача";
		Запрос.УстановитьПараметр("Задача", Задача);
	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "&ОтборПоЗадаче", ОтборПоЗадаче);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВсеЗадачи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ВсеЗадачи;

КонецФункции

// Фиксация изменения состояния задачи в регистре СведенияОПоискеЗадач
//
// Параметры:
//	РезультатПоиска - Структура - коллекция дополнительных параметров:
//
Процедура ЗафиксироватьИзменениеРеквизитовЗадачВИсходномКоде(РезультатПоиска) Экспорт
	
	Для каждого КлючИЗначение Из РезультатПоиска Цикл
	
		МенеджерЗаписи = РегистрыСведений.СведенияОПоискеЗадач.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Задача = КлючИЗначение.Ключ;
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючИЗначение.Значение);
		
		МенеджерЗаписи.Записать();
	
	КонецЦикла; 

КонецПроцедуры

// Выполняет изменение статусов задачи по состоянию регистра СведенияОПоискеЗадач
// в рамках переданной конфигурации
//
// Параметры:
//  Конфигурация - СправочникСсылка.Конфигурации - отбор по конфигурации.
//
Процедура ПеренестиЗадачиНаПроверку(Конфигурация) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВсеЗадачиВРаботе
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению)
		|	И Задачи.Конфигурация = &Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОПоискеЗадачСрезПоследних.Задача КАК Задача
		|ИЗ
		|	РегистрСведений.СведенияОПоискеЗадач.СрезПоследних(
		|			,
		|			Задача В
		|				(ВЫБРАТЬ
		|					ВсеЗадачиВРаботе.Ссылка КАК Ссылка
		|				ИЗ
		|					ВсеЗадачиВРаботе КАК ВсеЗадачиВРаботе)) КАК СведенияОПоискеЗадачСрезПоследних
		|ГДЕ
		|	НЕ СведенияОПоискеЗадачСрезПоследних.УсловиеПоискаНайдено";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		ЗадачаОбъект.Состояние = Перечисления.СостоянияЗадач.ОжидаетПроверки;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;	

КонецПроцедуры

// Формирует данные ИБ по актуальным задачам для выгрузки их в файлы экспорта Сонара.
//
// Параметры:
//  Конфигурация - СправочникСсылка.Конфигурации - отбор по конфигурации
//
// Возвращаемое значение:
//  Массив - структур в каждой структуре ошибки по одному файлу
//
Функция ДанныеПоЗадачамДляВыгрузки(Конфигурация) Экспорт
	
	ДанныеПоЗадачам = Новый Соответствие;
	
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиАктуальныхЗадачДляСонара());
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	РезультатЗапроса = Запрос.Выполнить();
    ВыборкаФайл = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
    Пока ВыборкаФайл.Следующий() Цикл
		
		ВсеОшибкиФайла = Новый Массив;		
		СтрокаПроверки = ВыборкаФайл.Выбрать();  
		
		Пока СтрокаПроверки.Следующий() Цикл
			
			Ключи = "НомерНачальнойСтроки, НомерСимволаНачальнойСтроки, НомерКонечнойСтроки, НомерСимволаКонечнойСтроки, ЗадачаОписание";
			ОднаОшибкаВФайле = Новый Структура(Ключи);
			
			ЗаполнитьЗначенияСвойств(ОднаОшибкаВФайле, СтрокаПроверки);
			
			ВсеОшибкиФайла.Добавить(ОднаОшибкаВФайле);
			
		КонецЦикла; 
		
		ДанныеПоЗадачам.Вставить(ВыборкаФайл.ЗадачаФайлНаименование, ВсеОшибкиФайла);
		
	КонецЦикла;
	
	Возврат ДанныеПоЗадачам;
	
КонецФункции

// Получает Имя файла для выгрузки для указанной конфигурации
//
// Параметры:
//  Конфигурация - СправочникСсылка.Конфигурации - Конфигурация.
//
//
// Возвращаемое значение:
//  Строка - Имя итогового файла для Сонара
//
Функция ИмяФайлаРезультата(Конфигурация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Конфигурации.ИмяФайлаРезультата КАК ИмяФайлаРезультата
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Конфигурация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИмяФайлаРезультата;
	
КонецФункции

// Получает из ИБ данные по указанной задаче, которые будут доступны на клиенте.
//
// Параметры:
//  Задача - СправочникСсылка.Задачи - Задача.
//
// Возвращаемое значение:
//  Структура - Свойства задачи, а так же её табличная часть
//
Функция ДанныеЗадачи(Задача) Экспорт
	
	ДанныеЗадачи = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Конфигурация.КаталогРепозитория КАК КонфигурацияКаталогРепозитория,
		|	Задачи.Файл.Наименование КАК ФайлНаименование,
		|	Задачи.ВариантУсловияПоиска КАК ВариантУсловияПоиска,
		|	Задачи.Условия.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидПострочногоПоиска КАК ВидПострочногоПоиска,
		|		ВариантПоиска КАК ВариантПоиска,
		|		Условие КАК Условие,
		|		МеткаВКоде КАК МеткаВКоде
		|	) КАК Условия
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИмяФайла = Выборка.КонфигурацияКаталогРепозитория + Выборка.ФайлНаименование;	
	
	ТаблицаУсловия = Выборка.Условия.Выгрузить();
	Условия = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаУсловия);
	
	ДанныеЗадачи.Вставить("ИмяФайла", ИмяФайла);
	ДанныеЗадачи.Вставить("ВариантУсловияПоиска", Выборка.ВариантУсловияПоиска);
	ДанныеЗадачи.Вставить("Условия", Условия);
	
	Возврат ДанныеЗадачи;

КонецФункции 

// Фиксирует выполнение задачи с указанным качеством работ.
//
// Параметры:
//  Задача - СправочникСсылка.Задачи - Задача.
//  КачествоРешения - ПеречислениеСсылка.КачествоРешенияЗадачи - качество выполненной работы.
//
Процедура ЗавершитьРаботуНадЗадачей(Задача, КачествоРешения) Экспорт

	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.Состояние 			= ПредопределенноеЗначение("Перечисление.СостоянияЗадач.Выполнено");
	ЗадачаОбъект.КачествоРешения 	= КачествоРешения;	
	
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВыгрузкиАктуальныхЗадачДляСонара()

	Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВсеЗадачиВРаботе
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению)
		|	И Задачи.Конфигурация = &Конфигурация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОПоискеЗадачСрезПоследних.Задача КАК Задача,
		|	СведенияОПоискеЗадачСрезПоследних.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
		|	СведенияОПоискеЗадачСрезПоследних.НомерСимволаНачальнойСтроки КАК НомерСимволаНачальнойСтроки,
		|	СведенияОПоискеЗадачСрезПоследних.НомерКонечнойСтроки КАК НомерКонечнойСтроки,
		|	СведенияОПоискеЗадачСрезПоследних.НомерСимволаКонечнойСтроки КАК НомерСимволаКонечнойСтроки
		|ПОМЕСТИТЬ ОжидающиеВыполненияЗадачи
		|ИЗ
		|	РегистрСведений.СведенияОПоискеЗадач.СрезПоследних(
		|			,
		|			Задача В
		|				(ВЫБРАТЬ
		|					ВсеЗадачиВРаботе.Ссылка КАК Ссылка
		|				ИЗ
		|					ВсеЗадачиВРаботе КАК ВсеЗадачиВРаботе)) КАК СведенияОПоискеЗадачСрезПоследних
		|ГДЕ
		|	СведенияОПоискеЗадачСрезПоследних.УсловиеПоискаНайдено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОжидающиеВыполненияЗадачи.Задача КАК Задача,
		|	ОжидающиеВыполненияЗадачи.НомерНачальнойСтроки КАК НомерНачальнойСтроки,
		|	ОжидающиеВыполненияЗадачи.НомерСимволаНачальнойСтроки КАК НомерСимволаНачальнойСтроки,
		|	ОжидающиеВыполненияЗадачи.НомерКонечнойСтроки КАК НомерКонечнойСтроки,
		|	ОжидающиеВыполненияЗадачи.НомерСимволаКонечнойСтроки КАК НомерСимволаКонечнойСтроки,
		|	ОжидающиеВыполненияЗадачи.Задача.Файл.Наименование КАК ЗадачаФайлНаименование,
		|	ОжидающиеВыполненияЗадачи.Задача.Описание КАК ЗадачаОписание
		|ИЗ
		|	ОжидающиеВыполненияЗадачи КАК ОжидающиеВыполненияЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаФайлНаименование,
		|	НомерНачальнойСтроки
		|ИТОГИ ПО
		|	ЗадачаФайлНаименование";
	
	Возврат Текст;

КонецФункции

#КонецОбласти
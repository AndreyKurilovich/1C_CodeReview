
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСтатусПоУмолчанию();
	УстановитьЗначениеПараметровСписка();

КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СписокСсылка.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Конфигурация = Настройки["Конфигурация"];  
	
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", Конфигурация); 
	
	ЗаполнитьПараметрыПоследнегоКоммита();	
	ОбновитьЗначенияДиаграмм();
	УстановитьЗаголовкиСостоянийЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Задача" Тогда
		
		ДействияПослеЗаписиЗадачи();
	
	КонецЕсли;	

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостоянияЗадачПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("Состояние", ОтборСостоянияЗадач);
	УстановитьЗаголовкиСостоянийЗадач();
	
	Элементы.ГруппаВыполнениеЗадачи.Доступность = 
		ОтборСостоянияЗадач = ПредопределенноеЗначение("Перечисление.СостоянияЗадач.ОжидаетПроверки");
	
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	
	КонфигурацияПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КонфигурацияПутьРепозиторияНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПутьРепозиторияКонфигурации = ПутьРепозиторияКонфигурации(Конфигурация);
	Если ПустаяСтрока(ПутьРепозиторияКонфигурации) Тогда
		Возврат;	
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения(), ПутьРепозиторияКонфигурации);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ВыгрузитьЗадачи(Команда)
	
	РаботаСЗадачамиКлиент.АктуализироватьЗадачи(Конфигурация);
	РаботаСЗадачамиКлиент.ВыгрузитьАктуальныеЗадачиДляСонара(Конфигурация); 
	
	УстановитьЗаголовкиСостоянийЗадач();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Выгрузка задач'"), , НСтр("ru='Выполнено'")); 
	
КонецПроцедуры 

&НаКлиенте
Процедура НоваяЗадача(Команда)
 	
 	ДанныеЗаполнения = Новый Структура;
 	ДанныеЗаполнения.Вставить("Конфигурация", Конфигурация);
 	
 	ПараметрыФормы = Новый Структура;
 	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
 	
 	ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы, , 
 		УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполнениеЗадачи(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	Если КачествоРешения.Пустая() Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Укажите качество решения.'"), , , "КачествоРешения");	
		Возврат;
	
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтметитьВыполнениеЗадачиНаСервере(ТекущиеДанные.Ссылка);
	
	Элементы.Список.Обновить();
	
	КачествоРешения = ПредопределенноеЗначение("Перечисление.КачествоРешенияЗадачи.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОбработанныйКоммит(Команда)

	Если Конфигурация.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	НормальнаяДлинаХешаКоммита = 8;
	Если СтрДлина(ОбработанныйКоммит) <> НормальнаяДлинаХешаКоммита Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Некорректный commit hash.'"), , "ОбработанныйКоммит");
		Возврат;	
	КонецЕсли;

	ЗафиксироватьОбработанныйКоммитНаСервере(Конфигурация, ОбработанныйКоммит);
	ЗаполнитьПараметрыПоследнегоКоммита();
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСтатусПоУмолчанию()
	
	ОтборСостоянияЗадач = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.СостоянияЗадач.КВыполнению");

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметровСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", 	Конфигурация);
	Список.Параметры.УстановитьЗначениеПараметра("Состояние", 		ОтборСостоянияЗадач);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 	ТекущаяДатаСеанса());
 	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСостоянийЗадач()
	
	Запрос = Новый Запрос(ТекстЗапросаУстановитьЗаголовкиСостоянийЗадач());
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементСпискаВыбора = Элементы.ОтборСостоянияЗадач.СписокВыбора.НайтиПоЗначению(Выборка.Состояние); 
		
		Если Выборка.Количество = 0 Тогда
			ПредставлениеСостояния = Выборка.СостояниеПредставление;  
		Иначе
		 	ПредставлениеСостояния = СтрШаблон("%1 (%2)", Выборка.СостояниеПредставление, Выборка.Количество); 
		КонецЕсли;
		
	    ЭлементСпискаВыбора.Представление = ПредставлениеСостояния;
		
	КонецЦикла;

КонецПроцедуры  

&НаСервере
Функция ТекстЗапросаУстановитьЗаголовкиСостоянийЗадач()

	Текст = 
		"ВЫБРАТЬ
		|	Состояния.Состояние КАК Состояние,
		|	СУММА(Состояния.Количество) КАК Количество,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Состояния.Состояние) КАК СостояниеПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		Задачи.Состояние КАК Состояние,
		|		КОЛИЧЕСТВО(Задачи.Ссылка) КАК Количество
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению)
		|		И Задачи.Конфигурация = &Конфигурация
		|	СГРУППИРОВАТЬ ПО
		|		Задачи.Состояние
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Задачи.Состояние,
		|		КОЛИЧЕСТВО(Задачи.Ссылка)
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.ОжидаетПроверки)
		|		И Задачи.Конфигурация = &Конфигурация
		|	СГРУППИРОВАТЬ ПО
		|		Задачи.Состояние
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению),
		|		0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.ОжидаетПроверки),
		|		0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.Выполнено),
		|		0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.Отменено),
		|		0) КАК Состояния
		|СГРУППИРОВАТЬ ПО
		|	Состояния.Состояние";
	
	Возврат Текст;

КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПоследнегоКоммита()
	
	ДанныеПоследнегоКоммита = ДанныеПоследнегоКоммита();
	
	ОбработанныйКоммит = ДанныеПоследнегоКоммита.ОбработанныйКоммит;
	
	ДатаОбработанногоКоммита = ДанныеПоследнегоКоммита.ДатаФиксации;
	
	РазностьДат = ТекущаяДатаСеанса() - ДанныеПоследнегоКоммита.ДатаФиксации;
	СекундВСутках = ОбщегоНазначенияКлиентСервер.СекундВСутках();	
	КоличествоДнейБезКодРевью = Цел(РазностьДат / СекундВСутках);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоследнегоКоммита()
	
	ДанныеПоследнегоКоммита = Новый Структура();
	ДанныеПоследнегоКоммита.Вставить("ОбработанныйКоммит", "");
	ДанныеПоследнегоКоммита.Вставить("ДатаФиксации", Дата(1, 1, 1));
	
	Если Не Конфигурация.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбработанныеКоммитыПроектаСрезПоследних.Период КАК ДатаФиксации,
			|	ОбработанныеКоммитыПроектаСрезПоследних.Коммит КАК ОбработанныйКоммит
			|ИЗ
			|	РегистрСведений.ОбработанныеКоммитыПроекта.СрезПоследних(, Конфигурация = &Конфигурация) КАК
			|		ОбработанныеКоммитыПроектаСрезПоследних";
		
		Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();		
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(ДанныеПоследнегоКоммита, Выборка);
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат ДанныеПоследнегоКоммита;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗафиксироватьОбработанныйКоммитНаСервере(Конфигурация, ОбработанныйКоммит)

	Если Конфигурация.Пустая() Или ПустаяСтрока(ОбработанныйКоммит) Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ОбработанныеКоммитыПроекта.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Конфигурация.Установить(Конфигурация);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Конфигурация = Конфигурация;
	НоваяЗапись.Период = ТекущаяДатаСеанса();
	НоваяЗапись.Коммит = ОбработанныйКоммит;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутьРепозиторияКонфигурации(Конфигурация)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конфигурация, "ПутьРепозитория");
	
КонецФункции

&НаСервере
Процедура КонфигурацияПриИзмененииНаСервере()
	
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", Конфигурация);
	
	ЗаполнитьПараметрыПоследнегоКоммита();
    ОбновитьЗначенияДиаграмм();
	УстановитьЗаголовкиСостоянийЗадач();

КонецПроцедуры 

&НаСервере
Процедура ДействияПослеЗаписиЗадачи()
	
	УстановитьЗаголовкиСостоянийЗадач();	
	ОбновитьЗначенияДиаграмм();

КонецПроцедуры

&НаСервере
Процедура ОтметитьВыполнениеЗадачиНаСервере(Задача)
	
	РаботаСЗадачамиВызовСервера.ЗавершитьРаботуНадЗадачей(Задача, КачествоРешения);
	УстановитьЗаголовкиСостоянийЗадач(); 
	ОбновитьЗначенияДиаграмм();
	
КонецПроцедуры

#Область РаботаСДиаграммами

&НаСервере
Процедура ОбновитьЗначенияДиаграмм() 
	
	ОбновитьЗначенияДиаграммыКачествоВыполнения(); 
	ОбновитьЗначенияДиаграммыСрокиЗадач();

КонецПроцедуры    

&НаСервере
Процедура ОбновитьЗначенияДиаграммыКачествоВыполнения()
	
	КачествоВыполнения.Очистить();
	
	ДанныеКачества = ДанныеКачестваВыполненияЗадач(Конфигурация);
	
	Точка = КачествоВыполнения.УстановитьТочку(НСтр("ru='Качество выполнения'"));
	
	Для каждого СтатистикаУровняКачества Из ДанныеКачества Цикл
	
		Серия = КачествоВыполнения.УстановитьСерию(СтатистикаУровняКачества.КачествоРешенияПредставление); 
		Серия.Цвет = Перечисления.КачествоРешенияЗадачи.ЦветКачестваРешения(СтатистикаУровняКачества.КачествоРешения);
		
		КачествоВыполнения.УстановитьЗначение(Точка, Серия, СтатистикаУровняКачества.КоличествоЗадач); 
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ДанныеКачестваВыполненияЗадач(Конфигурация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Задачи.Ссылка) КАК КоличествоЗадач,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Задачи.КачествоРешения) КАК КачествоРешенияПредставление,
		|	Задачи.КачествоРешения КАК КачествоРешения
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Конфигурация = &Конфигурация
		|	И Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.Выполнено)
		|	И Задачи.ДатаСоздания >= &ДатаСбораСтатистики
		|СГРУППИРОВАТЬ ПО
		|	Задачи.КачествоРешения";
	
	Запрос.УстановитьПараметр("Конфигурация", Конфигурация);
	Запрос.УстановитьПараметр("ДатаСбораСтатистики", ДатаСбораСтатистикиДиаграмм());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	

КонецФункции

&НаСервере
Процедура ОбновитьЗначенияДиаграммыСрокиЗадач()
	
	ЦветНовых 		= Новый Цвет(20, 71, 30);
	ЦветЗакрытых 	= Новый Цвет(218, 106, 0);
	
	СрокиЗадач.Очистить();
		
	ДанныеПоСрокамЗадач = ДанныеПоСрокамЗадач(Конфигурация);
	Для каждого СтатистикаЗаНеделю Из ДанныеПоСрокамЗадач Цикл
		
		НазваниеНедели = СтрШаблон(НСтр("ru='%1 нед.'"), СтатистикаЗаНеделю.Неделя);
		Точка = СрокиЗадач.УстановитьТочку(НазваниеНедели);
		
		СерияНовых = СрокиЗадач.УстановитьСерию("Новых");
		СерияНовых.Цвет = ЦветНовых;
		СрокиЗадач.УстановитьЗначение(Точка, СерияНовых, СтатистикаЗаНеделю.КоличествоСоздано);    
		
		СерияЗакрытых = СрокиЗадач.УстановитьСерию("Закрытых"); 
		СерияЗакрытых.Цвет = ЦветЗакрытых;
		СрокиЗадач.УстановитьЗначение(Точка, СерияЗакрытых, СтатистикаЗаНеделю.КоличествоЗавершено);    
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Функция ДанныеПоСрокамЗадач(Конфигурация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 6
		|	Статистика.Неделя КАК Неделя,
		|	СУММА(Статистика.КоличествоСоздано) КАК КоличествоСоздано,
		|	СУММА(Статистика.КоличествоЗавершено) КАК КоличествоЗавершено
		|ИЗ
		|	(ВЫБРАТЬ
		|		НЕДЕЛЯ(Задачи.ДатаСоздания) КАК Неделя,
		|		КОЛИЧЕСТВО(Задачи.Ссылка) КАК КоличествоСоздано,
		|		0 КАК КоличествоЗавершено
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.ДатаСоздания >= &ДатаСбораСтатистики
		|		И Задачи.Конфигурация = &Конфигурация
		|		И Задачи.Состояние <> Значение(Перечисление.СостоянияЗадач.Отменено)
		|	СГРУППИРОВАТЬ ПО
		|		НЕДЕЛЯ(Задачи.ДатаСоздания)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		НЕДЕЛЯ(Задачи.ДатаЗавершения),
		|		0,
		|		КОЛИЧЕСТВО(Задачи.Ссылка)
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.ДатаСоздания >= &ДатаСбораСтатистики
		|		И Задачи.Конфигурация = &Конфигурация
		|		И Задачи.Состояние <> Значение(Перечисление.СостоянияЗадач.Отменено)
		|	СГРУППИРОВАТЬ ПО
		|		НЕДЕЛЯ(Задачи.ДатаЗавершения)) КАК Статистика
		|СГРУППИРОВАТЬ ПО
		|	Статистика.Неделя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Неделя УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНачалаГода", НачалоГода(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Конфигурация", 	Конфигурация);
	Запрос.УстановитьПараметр("ДатаСбораСтатистики", ДатаСбораСтатистикиДиаграмм());
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеПоСрокамЗадач = РезультатЗапроса.Выгрузить();
	
	ДанныеПоСрокамЗадач.Сортировать("Неделя");
	
	Возврат ДанныеПоСрокамЗадач;

КонецФункции 

&НаСервере
Функция ДатаСбораСтатистикиДиаграмм()
	
	ДатаДваМесяцаНазад 	= ДобавитьМесяц(ТекущаяДатаСеанса(), -2);
	НачалоГода 			= НачалоГода(ТекущаяДатаСеанса());	
	
	ДатаСбораСтатистики = Макс(ДатаДваМесяцаНазад, НачалоГода);
	
	Возврат ДатаСбораСтатистики;
	
КонецФункции

#КонецОбласти 

#КонецОбласти
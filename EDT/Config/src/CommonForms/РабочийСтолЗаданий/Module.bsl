
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСтатусПоУмолчанию();
	УстановитьЗначениеПараметровСписка();
	УстановитьЗаголовкиСостоянийЗадач();
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СписокСсылка.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Конфигурация = Настройки["Конфигурация"];
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", Конфигурация); 
	ОбработанныйКоммит = ПоследнийОбработанныйКоммит(Конфигурация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Задача" Тогда
	
		УстановитьЗаголовкиСостоянийЗадач();	
	
	КонецЕсли;	

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостоянияЗадачПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("Состояние", ОтборСостоянияЗадач);
	УстановитьЗаголовкиСостоянийЗадач();
	
	Элементы.ГруппаВыполнениеЗадачи.Доступность = 
		ОтборСостоянияЗадач = ПредопределенноеЗначение("Перечисление.СостоянияЗадач.ОжидаетПроверки");
	
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", Конфигурация);
	ОбработанныйКоммит = ПоследнийОбработанныйКоммит(Конфигурация);
	
КонецПроцедуры 

&НаКлиенте
Процедура КонфигурацияПутьРепозиторияНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПутьРепозиторияКонфигурации = ПутьРепозиторияКонфигурации(Конфигурация);
	Если ПустаяСтрока(ПутьРепозиторияКонфигурации) Тогда
		Возврат;	
	КонецЕсли;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения(), ПутьРепозиторияКонфигурации);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ВыгрузитьЗадачи(Команда)
	
	РаботаСЗадачамиКлиент.АктуализироватьЗадачи(Конфигурация);
	РаботаСЗадачамиКлиент.ВыгрузитьАктуальныеЗадачиДляСонара(Конфигурация); 
	
	УстановитьЗаголовкиСостоянийЗадач();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Выгрузка задач'"), , НСтр("ru='Выполнено'")); 
	
КонецПроцедуры 

&НаКлиенте
Процедура НоваяЗадача(Команда)
 	
 	ДанныеЗаполнения = Новый Структура;
 	ДанныеЗаполнения.Вставить("Конфигурация", Конфигурация);
 	
 	ПараметрыФормы = Новый Структура;
 	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
 	
 	ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы, , 
 		УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыполнениеЗадачи(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	Если КачествоРешения.Пустая() Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Укажите качество решения.'"), , , "КачествоРешения");	
		Возврат;
	
	КонецЕсли;
	
	ОчиститьСообщения();
	
	РаботаСЗадачамиВызовСервера.ЗавершитьРаботуНадЗадачей(ТекущиеДанные.Ссылка, КачествоРешения);
	УстановитьЗаголовкиСостоянийЗадач(); 
	
	Элементы.Список.Обновить();
	
	КачествоРешения = ПредопределенноеЗначение("Перечисление.КачествоРешенияЗадачи.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОбработанныйКоммит(Команда)

	Если Конфигурация.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	НормальнаяДлинаХешаКоммита = 8;
	Если СтрДлина(ОбработанныйКоммит) <> НормальнаяДлинаХешаКоммита Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Некорректный commit hash.'"), , "ОбработанныйКоммит");
		Возврат;	
	КонецЕсли;

	ЗафиксироватьОбработанныйКоммитНаСервере(Конфигурация, ОбработанныйКоммит);

КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСтатусПоУмолчанию()
	
	ОтборСостоянияЗадач = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.СостоянияЗадач.КВыполнению");

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметровСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("Конфигурация", 	Конфигурация);
	Список.Параметры.УстановитьЗначениеПараметра("Состояние", 		ОтборСостоянияЗадач);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 	ТекущаяДатаСеанса());
 	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСостоянийЗадач()
	
	Запрос = Новый Запрос(ТекстЗапросаУстановитьЗаголовкиСостоянийЗадач());
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементСпискаВыбора = Элементы.ОтборСостоянияЗадач.СписокВыбора.НайтиПоЗначению(Выборка.Состояние); 
		
		Если Выборка.Количество = 0 Тогда
			ПредставлениеСостояния = Выборка.СостояниеПредставление;  
		Иначе
		 	ПредставлениеСостояния = СтрШаблон("%1 (%2)", Выборка.СостояниеПредставление, Выборка.Количество); 
		КонецЕсли;
		
	    ЭлементСпискаВыбора.Представление = ПредставлениеСостояния;
		
	КонецЦикла;

КонецПроцедуры  

&НаСервере
Функция ТекстЗапросаУстановитьЗаголовкиСостоянийЗадач()

	Текст = 
		"ВЫБРАТЬ
		|	Состояния.Состояние КАК Состояние,
		|	СУММА(Состояния.Количество) КАК Количество,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Состояния.Состояние) КАК СостояниеПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		Задачи.Состояние КАК Состояние,
		|		КОЛИЧЕСТВО(Задачи.Ссылка) КАК Количество
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Задачи.Состояние
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Задачи.Состояние,
		|		КОЛИЧЕСТВО(Задачи.Ссылка)
		|	ИЗ
		|		Справочник.Задачи КАК Задачи
		|	ГДЕ
		|		Задачи.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.ОжидаетПроверки)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Задачи.Состояние
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.КВыполнению),
		|		0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.ОжидаетПроверки),
		|		0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.Выполнено),
		|		0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗадач.Отменено),
		|		0) КАК Состояния
		|
		|СГРУППИРОВАТЬ ПО
		|	Состояния.Состояние";
	
	Возврат Текст;

КонецФункции

&НаСервереБезКонтекста
Функция ПоследнийОбработанныйКоммит(Конфигурация)
	
	Если Конфигурация.Пустая() Тогда
		ОбработанныйКоммит = "";
	Иначе
		ОбработанныйКоммит = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конфигурация, "ОбработанныйКоммит");
	КонецЕсли;
	
	Возврат ОбработанныйКоммит;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗафиксироватьОбработанныйКоммитНаСервере(Конфигурация, ОбработанныйКоммит)

	Если Конфигурация.Пустая() Или ПустаяСтрока(ОбработанныйКоммит) Тогда
		Возврат;
	КонецЕсли;	
	
	КонфигурацияОбъект = Конфигурация.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Конфигурация);
	
	КонфигурацияОбъект.ОбработанныйКоммит = ОбработанныйКоммит;
	
	КонфигурацияОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПутьРепозиторияКонфигурации(Конфигурация)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конфигурация, "ПутьРепозитория");
	
КонецФункции
#КонецОбласти
